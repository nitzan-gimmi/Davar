name: Davar Content Contributor

on:
  issues:
    types: [opened]

jobs:
  add-new-root:
    if: startsWith(github.event.issue.title, 'הוסף שורש:')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 3. Install dependencies
        run: pip install requests google-generativeai

      - name: 4. Run Generation and Commit Script
        id: generate_commit
        run: |
          python -c """
import os
import google.generativeai as genai
import json
import base64
import requests
import sys

# --- Get variables from environment ---
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY_SECRET')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN_SECRET')
ISSUE_TITLE = os.getenv('ISSUE_TITLE')
REPO_FULL_NAME = os.getenv('REPO_FULL_NAME')

if not all([GEMINI_API_KEY, GITHUB_TOKEN, ISSUE_TITLE, REPO_FULL_NAME]):
    print("Error: Missing one or more environment variables.")
    sys.exit(1)

# --- Extract root name from issue title ---
try:
    # Split the title by ':' and take the second part, then strip whitespace
    root_name = ISSUE_TITLE.split(':', 1)[1].strip()
    if not root_name:
        raise IndexError
except IndexError:
    print(f"Error: Could not extract root name from title: {ISSUE_TITLE}")
    sys.exit(1)

# --- 1. Call Gemini to generate the JSON content ---
print(f"Generating JSON for root: {root_name}...")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# This is the corrected line: Using single quotes for the outer f-string
# allows using double quotes inside without complex escaping.
prompt = f'''
אתה המומחה הראשי של פרויקט 'דָּבָר'.
משימתך היא לייצר את קובץ ה-JSON המלא עבור 'משפחת השורש' הבאה: **{root_name}**.
ודא שהקובץ כולל את כל הבניינים הרלוונטיים, עם כל ההטיות, הניקוד, והיחסים ביניהם, בהתאם לארכיטקטורה המדויקת של הפרויקט.
השב עם תוכן ה-JSON בלבד, בתוך בלוק קוד של json, ללא טקסט נוסף.
'''
try:
    response = model.generate_content(prompt)
    json_content_raw = response.text.strip()
    if json_content_raw.startswith('```json'):
        json_content_raw = json_content_raw[7:]
    if json_content_raw.endswith('```'):
        json_content_raw = json_content_raw[:-3]
    
    # Validate that the content is valid JSON
    json.loads(json_content_raw)
    print("Successfully generated and validated JSON content.")

except Exception as e:
    print(f"Error generating content from Gemini: {e}")
    sys.exit(1)


# --- 2. Commit the new file to GitHub ---
filepath_in_repo = f"data/roots/{root_name}.json"
commit_message = f"feat(data): Automatically add full model for root {root_name}"
api_url = f"https://api.github.com/repos/{REPO_FULL_NAME}/contents/{filepath_in_repo}"

encoded_content = base64.b64encode(json_content_raw.encode('utf-8')).decode('utf-8')

headers = {
    'Authorization': f'token {GITHUB_TOKEN}',
    'Accept': 'application/vnd.github.v3+json'
}
data = {
    'message': commit_message,
    'content': encoded_content,
    'branch': 'main'
}

print(f"Committing file '{filepath_in_repo}' to repository...")
res = requests.put(api_url, headers=headers, data=json.dumps(data))

if res.status_code in [200, 201]:
    print("✅ Successfully committed to GitHub.")
    commit_url = res.json().get('commit', {}).get('html_url', 'N/A')
    # Use outputs to pass data to the next step
    with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
      f.write(f"commit_url={commit_url}")
else:
    print(f"❌ Error committing to GitHub. Status: {res.status_code}")
    print(f"Response: {res.text}")
    sys.exit(1)
"""
        env:
          GEMINI_API_KEY_SECRET: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN_SECRET: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          REPO_FULL_NAME: ${{ github.repository }}

      - name: 5. Close Issue with a success comment
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: |
            ✅ Root **${{ github.event.issue.title }}** has been successfully added to the Davar project!

            You can view the new file here: `data/roots/${{ github.event.issue.title }} .json`

            Commit details: ${{ steps.generate_commit.outputs.commit_url }}
